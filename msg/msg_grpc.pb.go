// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: msg.proto

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckClient is the client API for Check service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckClient interface {
	SearchContentID(ctx context.Context, in *ContentIDRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchIPv4(ctx context.Context, in *IPv4Request, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchIPv6(ctx context.Context, in *IPv6Request, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchTextDecision(ctx context.Context, in *TextDecisionRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchSubnetIPv4(ctx context.Context, in *SubnetIPv4Request, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchSubnetIPv6(ctx context.Context, in *SubnetIPv6Request, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchDomainSuffix(ctx context.Context, in *SuffixRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchEntryType(ctx context.Context, in *EntryTypeRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	SearchOrg(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchWithoutNo(ctx context.Context, in *WithoutNoRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type checkClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckClient(cc grpc.ClientConnInterface) CheckClient {
	return &checkClient{cc}
}

func (c *checkClient) SearchContentID(ctx context.Context, in *ContentIDRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchContentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchIPv4(ctx context.Context, in *IPv4Request, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchIPv4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchIPv6(ctx context.Context, in *IPv6Request, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchIPv6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchURL(ctx context.Context, in *URLRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchDomain(ctx context.Context, in *DomainRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchTextDecision(ctx context.Context, in *TextDecisionRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchTextDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchSubnetIPv4(ctx context.Context, in *SubnetIPv4Request, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchSubnetIPv4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchSubnetIPv6(ctx context.Context, in *SubnetIPv6Request, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchSubnetIPv6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchDomainSuffix(ctx context.Context, in *SuffixRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchDomainSuffix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchEntryType(ctx context.Context, in *EntryTypeRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchEntryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/Summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchOrg(ctx context.Context, in *OrgRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) SearchWithoutNo(ctx context.Context, in *WithoutNoRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/msg.Check/SearchWithoutNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServer is the server API for Check service.
// All implementations must embed UnimplementedCheckServer
// for forward compatibility
type CheckServer interface {
	SearchContentID(context.Context, *ContentIDRequest) (*SearchResponse, error)
	SearchIPv4(context.Context, *IPv4Request) (*SearchResponse, error)
	SearchIPv6(context.Context, *IPv6Request) (*SearchResponse, error)
	SearchURL(context.Context, *URLRequest) (*SearchResponse, error)
	SearchDomain(context.Context, *DomainRequest) (*SearchResponse, error)
	SearchDecision(context.Context, *DecisionRequest) (*SearchResponse, error)
	SearchTextDecision(context.Context, *TextDecisionRequest) (*SearchResponse, error)
	SearchSubnetIPv4(context.Context, *SubnetIPv4Request) (*SearchResponse, error)
	SearchSubnetIPv6(context.Context, *SubnetIPv6Request) (*SearchResponse, error)
	SearchDomainSuffix(context.Context, *SuffixRequest) (*SearchResponse, error)
	SearchEntryType(context.Context, *EntryTypeRequest) (*SearchResponse, error)
	Summary(context.Context, *SummaryRequest) (*SummaryResponse, error)
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	SearchOrg(context.Context, *OrgRequest) (*SearchResponse, error)
	SearchWithoutNo(context.Context, *WithoutNoRequest) (*SearchResponse, error)
	mustEmbedUnimplementedCheckServer()
}

// UnimplementedCheckServer must be embedded to have forward compatible implementations.
type UnimplementedCheckServer struct {
}

func (UnimplementedCheckServer) SearchContentID(context.Context, *ContentIDRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContentID not implemented")
}
func (UnimplementedCheckServer) SearchIPv4(context.Context, *IPv4Request) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPv4 not implemented")
}
func (UnimplementedCheckServer) SearchIPv6(context.Context, *IPv6Request) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPv6 not implemented")
}
func (UnimplementedCheckServer) SearchURL(context.Context, *URLRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchURL not implemented")
}
func (UnimplementedCheckServer) SearchDomain(context.Context, *DomainRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDomain not implemented")
}
func (UnimplementedCheckServer) SearchDecision(context.Context, *DecisionRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDecision not implemented")
}
func (UnimplementedCheckServer) SearchTextDecision(context.Context, *TextDecisionRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTextDecision not implemented")
}
func (UnimplementedCheckServer) SearchSubnetIPv4(context.Context, *SubnetIPv4Request) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubnetIPv4 not implemented")
}
func (UnimplementedCheckServer) SearchSubnetIPv6(context.Context, *SubnetIPv6Request) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubnetIPv6 not implemented")
}
func (UnimplementedCheckServer) SearchDomainSuffix(context.Context, *SuffixRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDomainSuffix not implemented")
}
func (UnimplementedCheckServer) SearchEntryType(context.Context, *EntryTypeRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEntryType not implemented")
}
func (UnimplementedCheckServer) Summary(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedCheckServer) Ping(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCheckServer) SearchOrg(context.Context, *OrgRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrg not implemented")
}
func (UnimplementedCheckServer) SearchWithoutNo(context.Context, *WithoutNoRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWithoutNo not implemented")
}
func (UnimplementedCheckServer) mustEmbedUnimplementedCheckServer() {}

// UnsafeCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckServer will
// result in compilation errors.
type UnsafeCheckServer interface {
	mustEmbedUnimplementedCheckServer()
}

func RegisterCheckServer(s grpc.ServiceRegistrar, srv CheckServer) {
	s.RegisterService(&Check_ServiceDesc, srv)
}

func _Check_SearchContentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchContentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchContentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchContentID(ctx, req.(*ContentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchIPv4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPv4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchIPv4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchIPv4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchIPv4(ctx, req.(*IPv4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchIPv6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPv6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchIPv6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchIPv6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchIPv6(ctx, req.(*IPv6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchURL(ctx, req.(*URLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchDomain(ctx, req.(*DomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchTextDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchTextDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchTextDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchTextDecision(ctx, req.(*TextDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchSubnetIPv4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetIPv4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchSubnetIPv4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchSubnetIPv4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchSubnetIPv4(ctx, req.(*SubnetIPv4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchSubnetIPv6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetIPv6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchSubnetIPv6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchSubnetIPv6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchSubnetIPv6(ctx, req.(*SubnetIPv6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchDomainSuffix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuffixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchDomainSuffix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchDomainSuffix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchDomainSuffix(ctx, req.(*SuffixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchEntryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchEntryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchEntryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchEntryType(ctx, req.(*EntryTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/Summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).Summary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchOrg(ctx, req.(*OrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_SearchWithoutNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithoutNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).SearchWithoutNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Check/SearchWithoutNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).SearchWithoutNo(ctx, req.(*WithoutNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Check_ServiceDesc is the grpc.ServiceDesc for Check service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Check_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Check",
	HandlerType: (*CheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchContentID",
			Handler:    _Check_SearchContentID_Handler,
		},
		{
			MethodName: "SearchIPv4",
			Handler:    _Check_SearchIPv4_Handler,
		},
		{
			MethodName: "SearchIPv6",
			Handler:    _Check_SearchIPv6_Handler,
		},
		{
			MethodName: "SearchURL",
			Handler:    _Check_SearchURL_Handler,
		},
		{
			MethodName: "SearchDomain",
			Handler:    _Check_SearchDomain_Handler,
		},
		{
			MethodName: "SearchDecision",
			Handler:    _Check_SearchDecision_Handler,
		},
		{
			MethodName: "SearchTextDecision",
			Handler:    _Check_SearchTextDecision_Handler,
		},
		{
			MethodName: "SearchSubnetIPv4",
			Handler:    _Check_SearchSubnetIPv4_Handler,
		},
		{
			MethodName: "SearchSubnetIPv6",
			Handler:    _Check_SearchSubnetIPv6_Handler,
		},
		{
			MethodName: "SearchDomainSuffix",
			Handler:    _Check_SearchDomainSuffix_Handler,
		},
		{
			MethodName: "SearchEntryType",
			Handler:    _Check_SearchEntryType_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _Check_Summary_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Check_Ping_Handler,
		},
		{
			MethodName: "SearchOrg",
			Handler:    _Check_SearchOrg_Handler,
		},
		{
			MethodName: "SearchWithoutNo",
			Handler:    _Check_SearchWithoutNo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
